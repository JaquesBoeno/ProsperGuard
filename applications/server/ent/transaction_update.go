// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/JaquesBoeno/ProsperGuard/server/ent/predicate"
	"github.com/JaquesBoeno/ProsperGuard/server/ent/tag"
	"github.com/JaquesBoeno/ProsperGuard/server/ent/transaction"
	"github.com/JaquesBoeno/ProsperGuard/server/ent/user"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetType sets the "type" field.
func (tu *TransactionUpdate) SetType(s string) *TransactionUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableType(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetName sets the "name" field.
func (tu *TransactionUpdate) SetName(s string) *TransactionUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableName(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TransactionUpdate) SetDescription(s string) *TransactionUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDescription(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetValue sets the "value" field.
func (tu *TransactionUpdate) SetValue(f float64) *TransactionUpdate {
	tu.mutation.ResetValue()
	tu.mutation.SetValue(f)
	return tu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableValue(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetValue(*f)
	}
	return tu
}

// AddValue adds f to the "value" field.
func (tu *TransactionUpdate) AddValue(f float64) *TransactionUpdate {
	tu.mutation.AddValue(f)
	return tu
}

// SetDate sets the "date" field.
func (tu *TransactionUpdate) SetDate(t time.Time) *TransactionUpdate {
	tu.mutation.SetDate(t)
	return tu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableDate(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetDate(*t)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransactionUpdate) SetCreatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCreatedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableUpdatedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// SetHolderID sets the "holder" edge to the User entity by ID.
func (tu *TransactionUpdate) SetHolderID(id string) *TransactionUpdate {
	tu.mutation.SetHolderID(id)
	return tu
}

// SetNillableHolderID sets the "holder" edge to the User entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableHolderID(id *string) *TransactionUpdate {
	if id != nil {
		tu = tu.SetHolderID(*id)
	}
	return tu
}

// SetHolder sets the "holder" edge to the User entity.
func (tu *TransactionUpdate) SetHolder(u *User) *TransactionUpdate {
	return tu.SetHolderID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tu *TransactionUpdate) AddTagIDs(ids ...string) *TransactionUpdate {
	tu.mutation.AddTagIDs(ids...)
	return tu
}

// AddTags adds the "tags" edges to the Tag entity.
func (tu *TransactionUpdate) AddTags(t ...*Tag) *TransactionUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTagIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearHolder clears the "holder" edge to the User entity.
func (tu *TransactionUpdate) ClearHolder() *TransactionUpdate {
	tu.mutation.ClearHolder()
	return tu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tu *TransactionUpdate) ClearTags() *TransactionUpdate {
	tu.mutation.ClearTags()
	return tu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tu *TransactionUpdate) RemoveTagIDs(ids ...string) *TransactionUpdate {
	tu.mutation.RemoveTagIDs(ids...)
	return tu
}

// RemoveTags removes "tags" edges to Tag entities.
func (tu *TransactionUpdate) RemoveTags(t ...*Tag) *TransactionUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(transaction.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Value(); ok {
		_spec.SetField(transaction.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedValue(); ok {
		_spec.AddField(transaction.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Date(); ok {
		_spec.SetField(transaction.FieldDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.HolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.HolderTable,
			Columns: []string{transaction.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.HolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.HolderTable,
			Columns: []string{transaction.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TagsTable,
			Columns: transaction.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TagsTable,
			Columns: transaction.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TagsTable,
			Columns: transaction.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetType sets the "type" field.
func (tuo *TransactionUpdateOne) SetType(s string) *TransactionUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableType(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetName sets the "name" field.
func (tuo *TransactionUpdateOne) SetName(s string) *TransactionUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableName(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TransactionUpdateOne) SetDescription(s string) *TransactionUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDescription(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetValue sets the "value" field.
func (tuo *TransactionUpdateOne) SetValue(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetValue()
	tuo.mutation.SetValue(f)
	return tuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableValue(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetValue(*f)
	}
	return tuo
}

// AddValue adds f to the "value" field.
func (tuo *TransactionUpdateOne) AddValue(f float64) *TransactionUpdateOne {
	tuo.mutation.AddValue(f)
	return tuo
}

// SetDate sets the "date" field.
func (tuo *TransactionUpdateOne) SetDate(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetDate(t)
	return tuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableDate(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetDate(*t)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransactionUpdateOne) SetCreatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCreatedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableUpdatedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// SetHolderID sets the "holder" edge to the User entity by ID.
func (tuo *TransactionUpdateOne) SetHolderID(id string) *TransactionUpdateOne {
	tuo.mutation.SetHolderID(id)
	return tuo
}

// SetNillableHolderID sets the "holder" edge to the User entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableHolderID(id *string) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetHolderID(*id)
	}
	return tuo
}

// SetHolder sets the "holder" edge to the User entity.
func (tuo *TransactionUpdateOne) SetHolder(u *User) *TransactionUpdateOne {
	return tuo.SetHolderID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tuo *TransactionUpdateOne) AddTagIDs(ids ...string) *TransactionUpdateOne {
	tuo.mutation.AddTagIDs(ids...)
	return tuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (tuo *TransactionUpdateOne) AddTags(t ...*Tag) *TransactionUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTagIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearHolder clears the "holder" edge to the User entity.
func (tuo *TransactionUpdateOne) ClearHolder() *TransactionUpdateOne {
	tuo.mutation.ClearHolder()
	return tuo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tuo *TransactionUpdateOne) ClearTags() *TransactionUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tuo *TransactionUpdateOne) RemoveTagIDs(ids ...string) *TransactionUpdateOne {
	tuo.mutation.RemoveTagIDs(ids...)
	return tuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (tuo *TransactionUpdateOne) RemoveTags(t ...*Tag) *TransactionUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(transaction.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Value(); ok {
		_spec.SetField(transaction.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedValue(); ok {
		_spec.AddField(transaction.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Date(); ok {
		_spec.SetField(transaction.FieldDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.HolderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.HolderTable,
			Columns: []string{transaction.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.HolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.HolderTable,
			Columns: []string{transaction.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TagsTable,
			Columns: transaction.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TagsTable,
			Columns: transaction.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   transaction.TagsTable,
			Columns: transaction.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
